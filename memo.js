/*alert('こんにちは！');
// alert(111 + 222);
// その他のダイアログ confirm(OK/cansel) prompt(入力を受け取る)

main.js  200前後 　条件分岐

　　　//2つの値を比較する
・2つの値の比較には以下の演算子が使えます。

コード	結果	説明
1 == 1	true	左右が同じ場合はtrue
1 != 1	false	左右が異なる場合はtrue
5 > 5	false	左が右より大きい場合はtrue
5 >= 5	true	左が右と同じかより大きい場合はtrue
3 < 4	true	左が右より小さい場合はtrue
3 <= 4	true	左が右と同じかより小さい場合はtrue

上に挙げた比較では文字列と数値は区別されませんが、
文字列か数値かの種別も含めて一致しているかどうかを確認する比較演算子（===）もあります。
通常は === を使いましょう。バグ（プログラムの誤り）が起こりにくくなります。

コード	結果	説明
1 == '1'	true	左右が値の種類にかかわらず同じ場合はtrue
1 === '1'	false	左右が値の種類も含めて同じ場合はtrue
1 !== '1'	true	左右が種類も含めて全く一緒の場合以外はtrue

　　　//ANDとOR
   比較	        結果
true && true	true
true && false	false
false && true	false
false && false	false
true || true	true
true || false	true
false || true	true
false || false	false

　　//論理演算子
https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Operators/Logical_Operators

　　//truthyとfalsy
　　これらはfalse
・false
・undefined
・null
・0
・NaN
・''　文字の入っていない文字列を表しています。このような文字列を、「空文字列」
　上記以外はtrueとなる

　　//4.9　配列とループ
// 配列を作成
const numbers = ['あ', 'い', 'う', 'え', 'お', 'か', 'き'];

// 各要素を表示
for (let i = 0; i < numbers.length; i++) {
  console.log(numbers[i]);
}
for はループ（繰り返し）処理の命令です。以下のように書きます。
（ループでもコードを見やすくするため、{ } の中に処理を書く際は、行頭にインデントを入れます。）

for (初回だけ実行する処理; ループ継続条件; 毎ループ後の処理) {
  毎ループごとに実行する処理
}

forの記述に関する詳細
先ほどの「あいうえおかき」のコードにおける for の括弧の中について説明します。

初回だけ実行する処理
まず 初回だけ実行する処理 のところに    let i = 0;    と書きました。
これによって変数 i が作成されて、その変数の値が 0 となります。
このときの i を ループカウンタ（カウンタ変数） と言います。

ループ継続条件
ループ継続条件 に指定されている   i < numbers.length;   ですが、
numbers.length は、配列の要素数を表します。
このコードでは要素数が 7（インデックスとしては0から6まで）なので、
i < numbers.length は i < 7、つまり、
ループカウンタの i が 7 より小さい間だけ { ... } の内部が繰り返し実行されることになります。

毎ループ後の処理
しかし、ループカウンタの値が変化しなければ、無限に処理が繰り返されてしまいます。
そこで、毎ループ後の処理 のところに i++ と書いて、毎回のループの後で i++ を実行するようにしています。
i++ は i = i + 1 と同じ意味で、i が 1 増える処理です。

ループの挙動についてまとめ
以上をまとめると、i は 0 から始まって1, 2, 3, …と増えていき 
6 までループが繰り返され、7 になったところで継続条件を満たさなくなり、 for ループを抜けます。

ループの中では、ループカウンタ i の値をインデックスの番号として指定し、
配列の中に代入されている文字を表示しています。i が0のときは「あ」、1のときは「い」…と続きます。

インクリメントとデクリメント
ちなみに、++ という書き方は インクリメント と言います。
逆に1 減らしたいときは i-- と書くのですが、こちらは デクリメント と言います。
配列の各要素に対する処理は、上記のように、簡単に書くことができます。

　　　//  +=」について
total += numbers[i];の += は左側の値と右側の値を足し合わせて、
左側に代入する演算子です。つまりtotal += numbers[i];は、total = total + numbers[i]; と書き換えることもできます。

以下のようにコードに cosole.log を加えると、ループごとの計算過程が分かりやすくなるでしょう。

// 配列を作成
const numbers = [1, 2, 3, 4, 5, 7, 10];
let total = 0;

for (let i = 0; i < numbers.length; i++) {
  console.log(`${i + 1}回目のループ: 小計 = ${total} + ${numbers[i]}`);
  total += numbers[i];
}
// console.log(`合計: ${total}`);
console.log(`${i + 1}回目のループ: 小計 = ${total} + ${numbers[i]}`); を追加しました。
${i + 1} 内に含まれる + は演算子です。数値の足し算を行なっています。
たとえば最初のループで、i の値は 0 です。そのため i + 1 は 0 + 1 で、結果として「1」になります。

　　//breakとcontinue
forの中にifを書くことができます。こうすることで、ループの流れを制御できます。その際に使えるのが break と continue です。

breakは「ループの処理を強制終了する」ために使い、continueは「残りの処理をスキップしてループの先頭に戻る」ために使います。

以下のサンプルコードで理解を深めてください。
for (let i = 1; i <= 50; i++) {
  // iが20より大きい場合はループ処理を強制終了
  if (i > 20) {
    break;
  }
  
  // iが奇数の場合はスキップ
  if (i % 2 == 1) {
    continue;
  }
  
  // 2つのifの条件がtrueでない（iが偶数）ならiの値を表示
  console.log(i);
}
ループとしては1から50までの連続する整数（1, 2, 3, … , 49, 50）
ひとつずつについて処理を行う形となっていますが、i が20より大きい場合は
break; によって繰り返し処理が強制終了されます（21から50までの処理は行われません）。
また、ループカウンタ i の値が奇数（2で割った余りが1）の場合は、
continue; によって残りの繰り返し処理がスキップされ、カウンタの値が1増えてループの先頭に戻ります。
2つのifの条件がtrueでなければ（つまり i が偶数なら）、console.log(i); が実行されます。

結果として、画面には2から20までの偶数のみが表示されます。




















*/
